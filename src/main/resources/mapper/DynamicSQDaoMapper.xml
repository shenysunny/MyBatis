<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.mybatis.dao.DynamicSQLDao">
    <resultMap id="BaseResultMap" type="cn.mybatis.entity.EmpEntity">
        <id column="emp_id" jdbcType="INTEGER" property="empId"/>
        <result column="emp_name" jdbcType="VARCHAR" property="empName"/>
        <result column="emp_gender" jdbcType="CHAR" property="empGender"/>
        <result column="emp_email" jdbcType="VARCHAR" property="empEmail"/>
    </resultMap>
    <!--
       携带了哪个字段查询条件就带上这个字段的值
       &amp;&amp ==> and
       &quot;&quot ==> ''
    -->
    <select id="getEmpsByConditionIf" resultMap="BaseResultMap">
        SELECT emp_id, emp_name, emp_gender, emp_email
        FROM tab_emp
        <where>
            <if test="empId!=null">
                emp_id = #{empId,jdbcType=INTEGER}
            </if>

            <if test="empName!=null &amp;&amp; empName!=&quot;&quot;">
                AND emp_name = #{empName,jdbcType=VARCHAR}
            </if>
        </where>
    </select>


    <!-- 后面多出的and或者or where标签不能解决
     prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
             prefix给拼串后的整个字符串加一个前缀
     prefixOverrides="":
             前缀覆盖： 去掉整个字符串前面多余的字符
     suffix="":后缀
             suffix给拼串后的整个字符串加一个后缀
     suffixOverrides=""
             后缀覆盖：去掉整个字符串后面多余的字符

     -->
    <select id="getEmpsByConditionTrim" resultMap="BaseResultMap">
        SELECT emp_id, emp_name, emp_gender, emp_email
        FROM tab_emp
        <trim prefix="WHERE" suffixOverrides="AND">
            <if test="empId!=null">
                emp_id = #{empId,jdbcType=INTEGER} AND
            </if>

            <if test="empName!=null &amp;&amp; empName!=&quot;&quot;">
                emp_name = #{empName,jdbcType=VARCHAR}
            </if>
        </trim>
    </select>

    <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
    <select id="getEmpsByConditionChoose" resultMap="BaseResultMap">
        SELECT emp_id, emp_name, emp_gender, emp_email
        FROM tab_emp
        <where>
            <choose>
                <when test="empId!=null">
                    emp_id = #{empId,jdbcType=INTEGER}
                </when>
                <when test="empName!=null">
                    emp_name = #{empName,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--Set标签的使用-->
    <update id="updateEmp">
        update tab_emp
        <set>
            <if test="empName!=null">
                emp_name = #{empName,jdbcType=VARCHAR}
            </if>
        </set>
        WHERE emp_id = #{empId,jdbcType=INTEGER}

    </update>

    <!--查询员工id'在给定集合中的-->
    <select id="getEmpsByConditionForeach" resultMap="BaseResultMap">
        SELECT emp_id, emp_name, emp_gender, emp_email
        FROM tab_emp
        <!--
            collection：指定要遍历的集合：
                list类型的参数会特殊处理封装在map中，map的key就叫list
            item：将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分隔符
            open：遍历出所有结果拼接一个开始的字符
            close:遍历出所有结果拼接一个结束的字符
            index:索引。遍历list的时候是index就是索引，item就是当前值
                          遍历map的时候index表示的就是map的key，item就是map的值

            #{变量名}就能取出变量的值也就是当前遍历出的元素
          -->
        <foreach collection="ids" item="emp_id" separator=","
                 open="WHERE emp_id IN(" close=")">
            #{emp_id}
        </foreach>
    </select>

    <!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法-->
    <insert id="addEmps">
        INSERT INTO tab_emp (emp_name, emp_gender, emp_email)
        VALUES
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.empName,jdbcType=VARCHAR},#{emp.empGender,jdbcType=CHAR},#{emp.empEmail,jdbcType=VARCHAR})
        </foreach>

    </insert>
</mapper>